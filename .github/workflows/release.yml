# 工作流名称
name: Create Release

# 触发条件：当推送到 main 分支且标签符合 v*.*.* 格式时
on:
  push:
    branches:
      - main # 请根据您的主分支名称修改，例如 'master'
    tags:
      - 'v*.*.*' # 匹配如 v1.0.0, v2.1.3 这样的标签

# 权限设置，允许创建工作流运行所需的 token 来创建 Release
permissions:
  contents: write

# 定义一个作业
jobs:
  create-release:
    # 作业名称
    name: Build and Create Release
    # 指定运行环境
    runs-on: ubuntu-latest

    # 作业包含的步骤
    steps:
      # 步骤 1: 检出仓库代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录和标签，这对于某些构建过程可能是必要的
          fetch-depth: 0

      # 步骤 2: 设置 Java 环境 (根据您的项目需求调整版本)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 步骤 3: 授予 Gradle 脚本执行权限 (仅限 Unix 系统，Windows 不需要)
      - name: Make Gradle scripts executable
        run: chmod +x ./gradlew

      # 步骤 4: 执行 Gradle 构建任务
      # 通常 'build' 任务会生成位于 'build/libs/' 目录下的 JAR 文件
      # 请根据您的实际构建输出调整此命令和文件路径
      - name: Build with Gradle
        run: ./gradlew build

      # 步骤 5: 创建 GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # 使用触发工作流的标签作为 Release 的标签
          tag_name: ${{ github.ref_name }}
          # Release 标题，这里使用标签名
          name: Release ${{ github.ref_name }}
          # 从 CHANGELOG.md 文件中读取内容作为 Release 描述（可选）
          # body_path: ./CHANGELOG.md
          # 或者使用固定的描述
          body: |
            This is an automated release for version ${{ github.ref_name }}.
            Please refer to the changelog for details.
          # 指定要上传到 Release 的文件，这里是构建生成的 JAR 文件
          # 请根据您的实际 JAR 文件名和路径调整 'build/libs/*.jar'
          # 例如: build/libs/my-mod-1.0.0.jar
          files: |
            build/libs/*.jar